%{

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#define CODE

#include "code_gen.h"

%}

%start stat 

%term C_RETURN=1 C_ADD=2 C_MULT=3 C_MINUS=4 C_OR=5 C_NOT=6 C_LESS=7 C_EQ=8 C_NUM=9 C_FUNC=10 C_RET=11 C_ID=12

%%

stat: return                                # 0 # 

return: C_RET(const)                        # 0 # code_ret_const(LEFT_VAL(bnode)); 
return: C_RET(expr)                         # 1 # code_ret(LEFT_REG(bnode));

const: C_MINUS(const)                       # 0 # bnode->val = -LEFT_VAL(bnode);
const: C_NOT(const)                         # 0 # bnode->val = ~LEFT_VAL(bnode);
const: C_ADD(const, const)                  # 0 # bnode->val = LEFT_VAL(bnode) + RIGHT_VAL(bnode);
const: C_NUM                                # 0 # 

expr: C_MINUS(term)                         # 1 # bnode->reg = code_minus(LEFT_REG(bnode));
expr: C_NOT(term, term)                     # 1 # bnode->reg = code_not(LEFT_REG(bnode));
expr: C_ADD(term, term)                     # 1 # bnode->reg = code_add(LEFT_REG(bnode), RIGHT_REG(bnode));

term: expr
term: C_ID
term: C_NUM
term: const

%%
